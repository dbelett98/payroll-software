// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma: Defines the database schema using Prisma's declarative syntax.
// This file is used to generate migrations and TypeScript types automatically.
// Prisma handles SQL under the hood.

generator client {
  provider = "prisma-client-js"  // Generates the Prisma Client for Node.js queries
}

datasource db {
  provider = "postgresql"  // Specifies PostgreSQL as the database (open-source DB).
  url      = env("DATABASE_URL")  // Pulls connection string from .env for security.
}

// User model: Represents PSB staff (CEO/employees) and clients with role-based access.
// Includes authentication fields;  add JWT later .
model User {
  id        Int      @id @default(autoincrement())  // Auto-incrementing primary key.
  email     String   @unique  // Unique email for login.
  password  String   // Hashed password (use bcrypt for security, added later).
  role      Role     // Enum for roles (e.g., STAFF for full access, CLIENT for limited).
  createdAt DateTime @default(now())  // Timestamp for creation.
  updatedAt DateTime @updatedAt  // Auto-updates on changes.

  // Relationships: A user (client) can own a Client business; staff can manage multiple.
  client    Client?  // Optional one-to-one with Client (for client users).

  @@map("users")  // Maps to 'users' table in DB.
}

// Enum for user roles: Defines access levels (e.g., STAFF inputs data, CLIENT submits hours).
enum Role {
  STAFF
  CLIENT
  ADMIN  // For PSB CEO with extra privileges.
}

// Client model: Represents business clients of PSB Inc.
model Client {
  id           Int        @id @default(autoincrement())
  name         String     // Business name.
  bankAccount  String?    // Encrypted bank details for direct deposits (future integration).
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relationships: Linked to a User (client login), has many Employees and PayrollRuns.
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?       // Foreign key to User.
  employees    Employee[]
  payrollRuns  PayrollRun[]

  @@map("clients")
}

// Employee model: Stores employee data per client (e.g., for payroll calculations).
model Employee {
  id           Int      @id @default(autoincrement())
  name         String   // Employee full name.
  ssn          String   @unique  // Social Security Number (encrypt in production).
  bankAccount  String?  // Bank details for direct deposits (future ACH integration).
  hourlyRate   Float?   // Hourly rate (for calculations).
  salary       Float?   // Fixed salary (alternative to hourly).
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships: Belongs to a Client, has many PayrollEntries.
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     Int
  payrollEntries PayrollEntry[]

  @@map("employees")
}

// PayrollRun model: Represents a processed payroll batch (e.g., monthly run).
model PayrollRun {
  id           Int          @id @default(autoincrement())
  runDate      DateTime     @default(now())  // Date of processing.
  totalGross   Float        // Total gross pay calculated.
  totalNet     Float        // Total net pay after deductions.
  taxesWithheld Float       // Withheld taxes (for future agency payments).
  status       String       // e.g., 'Processed', 'Pending Deposit'.

  // Relationships: Belongs to a Client, has many PayrollEntries.
  client       Client       @relation(fields: [clientId], references: [id])
  clientId     Int
  entries      PayrollEntry[]

  @@map("payroll_runs")
}

// PayrollEntry model: Line items per employee in a payroll run (e.g., hours worked).
model PayrollEntry {
  id           Int        @id @default(autoincrement())
  hoursWorked  Float      // Hours input by PSB staff or submitted by client.
  grossPay     Float      // Calculated gross for this entry.
  deductions   Float      // Deductions (e.g., taxes).
  netPay       Float      // Net for this employee.

  // Relationships: Links to Employee and PayrollRun.
  employee     Employee   @relation(fields: [employeeId], references: [id])
  employeeId   Int
  payrollRun   PayrollRun @relation(fields: [payrollRunId], references: [id])
  payrollRunId Int

  @@map("payroll_entries")
}